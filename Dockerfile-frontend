# ref:
# https://github.com/vercel/next.js/tree/canary/examples/with-docker-multi-env

FROM node:16-alpine AS base

# 1. Install dependencies only when needed
FROM base AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat

WORKDIR /base

COPY ./frontend/package.json ./
COPY ./frontend/package-lock.json* ./

RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i; \
  else echo "Lockfile not found." && exit 1; \
  fi


# 2. Rebuild the source code only when needed
FROM base AS builder
WORKDIR /build

COPY --from=deps /base/node_modules ./node_modules
COPY ./frontend .
RUN yarn build


# 3. Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /build/.next/standalone ./

# 靜態內容, 可以交給 nginx 進行處理
COPY --from=builder --chown=nextjs:nodejs /build/.next/static ./.next/static
COPY --from=builder /build/public ./public

USER nextjs

ENV NODE_ENV=production
ENV PORT 3001

EXPOSE 3001
CMD ["node", "server.js"]