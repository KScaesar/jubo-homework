// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ioc

import (
	"github.com/KScaesar/jubo-homework/backend/application"
	"github.com/KScaesar/jubo-homework/backend/configs"
	"github.com/KScaesar/jubo-homework/backend/infra"
	"github.com/KScaesar/jubo-homework/backend/rest"
	"github.com/KScaesar/jubo-homework/backend/util/database"
	"github.com/gin-gonic/gin"
)

// Injectors from injector.go:

func NewHttpServerV1(cfg *configs.ProjectConfig) (*gin.Engine, error) {
	dbConfig := cfg.Pgsql
	wrapperGorm, err := database.NewGormPgsql(dbConfig)
	if err != nil {
		return nil, err
	}
	patientRepository := infra.NewPatientRepository(wrapperGorm)
	patientUseCase := application.NewPatientUseCase(patientRepository)
	patientHandler := rest.NewPatientHandler(patientUseCase)
	engine := rest.RegisterRouter(patientHandler)
	return engine, nil
}

func NewHttpServerV2(cfg *configs.ProjectConfig) (*gin.Engine, error) {
	dbConfig := cfg.Pgsql
	wrapperGorm, err := database.NewGormPgsql(dbConfig)
	if err != nil {
		return nil, err
	}
	iocAppV2, err := NewAppV2(cfg, wrapperGorm)
	if err != nil {
		return nil, err
	}
	patientService := iocAppV2.PatientService
	patientHandler := rest.NewPatientHandler(patientService)
	engine := rest.RegisterRouter(patientHandler)
	return engine, nil
}

func NewAppV2(cfg *configs.ProjectConfig, db *database.WrapperGorm) (*AppV2, error) {
	patientRepository := infra.NewPatientRepository(db)
	patientUseCase := application.NewPatientUseCase(patientRepository)
	iocAppV2 := &AppV2{
		PatientService: patientUseCase,
	}
	return iocAppV2, nil
}
